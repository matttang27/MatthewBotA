Bucket {
  _events: [Object: null prototype] {},
  _eventsCount: 0,
  _maxListeners: undefined,
  metadata: {},
  baseUrl: '/b',
  parent: Storage {
    baseUrl: 'https://storage.googleapis.com/storage/v1',
    apiEndpoint: 'https://storage.googleapis.com',
    timeout: undefined,
    globalInterceptors: [],
    interceptors: [],
    packageJson: {
      _from: '@google-cloud/storage@^5.3.0',
      _id: '@google-cloud/storage@5.15.3',
      _inBundle: false,
      _integrity: 'sha512-a2Y+mvfbzznWorQiv6c+qdPDlBpe47tikV8tpQSnvYXz1Ed/rjin41k2nKUQUcAPGHtYeTzGfKnCNKC+lv8qRg==',
      _location: '/@google-cloud/storage',
      _phantomChildren: {},
      _requested: [Object],
      _requiredBy: [Array],
      _resolved: 'https://registry.npmjs.org/@google-cloud/storage/-/storage-5.15.3.tgz',
      _shasum: 'f97ff762c1985d78cc9bca3baaa4b3e413330ae8',
      _spec: '@google-cloud/storage@^5.3.0',
      _where: '/home/runner/MatthewBot/node_modules/firebase-admin',
      author: [Object],
      bugs: [Object],
      bundleDependencies: false,
      dependencies: [Object],
      deprecated: false,
      description: 'Cloud Storage Client Library for Node.js',
      devDependencies: [Object],
      engines: [Object],
      files: [Array],
      homepage: 'https://github.com/googleapis/nodejs-storage#readme',
      keywords: [Array],
      license: 'Apache-2.0',
      main: './build/src/index.js',
      name: '@google-cloud/storage',
      repository: [Object],
      scripts: [Object],
      types: './build/src/index.d.ts',
      version: '5.15.3'
    },
    projectId: 'tosbot',
    projectIdRequired: false,
    providedUserAgent: undefined,
    makeAuthenticatedRequest: [Function: makeAuthenticatedRequest] {
      getCredentials: [Function: bound getCredentials],
      authClient: [GoogleAuth]
    },
    authClient: GoogleAuth {
      checkIsGCE: undefined,
      jsonContent: [Object],
      cachedCredential: null,
      _cachedProjectId: 'tosbot',
      keyFilename: undefined,
      scopes: [Array],
      clientOptions: undefined
    },
    getCredentials: [Function: bound getCredentials],
    acl: {
      OWNER_ROLE: 'OWNER',
      READER_ROLE: 'READER',
      WRITER_ROLE: 'WRITER'
    },
    retryOptions: {
      autoRetry: true,
      maxRetries: 3,
      retryDelayMultiplier: 2,
      totalTimeout: 600,
      maxRetryDelay: 64,
      retryableErrorFn: [Function: RETRYABLE_ERR_FN_DEFAULT],
      idempotencyStrategy: 1
    },
    getBucketsStream: [Function],
    getHmacKeysStream: [Function]
  },
  id: 'tosbot.appspot.com',
  createMethod: [Function: bound wrapper],
  methods: {
    create: { reqOpts: [Object] },
    delete: { reqOpts: [Object] },
    exists: { reqOpts: [Object] },
    get: { reqOpts: [Object] },
    getMetadata: { reqOpts: [Object] },
    setMetadata: { reqOpts: [Object] }
  },
  interceptors: [],
  pollIntervalMs: undefined,
  name: 'tosbot.appspot.com',
  storage: Storage {
    baseUrl: 'https://storage.googleapis.com/storage/v1',
    apiEndpoint: 'https://storage.googleapis.com',
    timeout: undefined,
    globalInterceptors: [],
    interceptors: [],
    packageJson: {
      _from: '@google-cloud/storage@^5.3.0',
      _id: '@google-cloud/storage@5.15.3',
      _inBundle: false,
      _integrity: 'sha512-a2Y+mvfbzznWorQiv6c+qdPDlBpe47tikV8tpQSnvYXz1Ed/rjin41k2nKUQUcAPGHtYeTzGfKnCNKC+lv8qRg==',
      _location: '/@google-cloud/storage',
      _phantomChildren: {},
      _requested: [Object],
      _requiredBy: [Array],
      _resolved: 'https://registry.npmjs.org/@google-cloud/storage/-/storage-5.15.3.tgz',
      _shasum: 'f97ff762c1985d78cc9bca3baaa4b3e413330ae8',
      _spec: '@google-cloud/storage@^5.3.0',
      _where: '/home/runner/MatthewBot/node_modules/firebase-admin',
      author: [Object],
      bugs: [Object],
      bundleDependencies: false,
      dependencies: [Object],
      deprecated: false,
      description: 'Cloud Storage Client Library for Node.js',
      devDependencies: [Object],
      engines: [Object],
      files: [Array],
      homepage: 'https://github.com/googleapis/nodejs-storage#readme',
      keywords: [Array],
      license: 'Apache-2.0',
      main: './build/src/index.js',
      name: '@google-cloud/storage',
      repository: [Object],
      scripts: [Object],
      types: './build/src/index.d.ts',
      version: '5.15.3'
    },
    projectId: 'tosbot',
    projectIdRequired: false,
    providedUserAgent: undefined,
    makeAuthenticatedRequest: [Function: makeAuthenticatedRequest] {
      getCredentials: [Function: bound getCredentials],
      authClient: [GoogleAuth]
    },
    authClient: GoogleAuth {
      checkIsGCE: undefined,
      jsonContent: [Object],
      cachedCredential: null,
      _cachedProjectId: 'tosbot',
      keyFilename: undefined,
      scopes: [Array],
      clientOptions: undefined
    },
    getCredentials: [Function: bound getCredentials],
    acl: {
      OWNER_ROLE: 'OWNER',
      READER_ROLE: 'READER',
      WRITER_ROLE: 'WRITER'
    },
    retryOptions: {
      autoRetry: true,
      maxRetries: 3,
      retryDelayMultiplier: 2,
      totalTimeout: 600,
      maxRetryDelay: 64,
      retryableErrorFn: [Function: RETRYABLE_ERR_FN_DEFAULT],
      idempotencyStrategy: 1
    },
    getBucketsStream: [Function],
    getHmacKeysStream: [Function]
  },
  userProject: undefined,
  acl: Acl {
    owners: {
      addAllAuthenticatedUsers: [Function],
      deleteAllAuthenticatedUsers: [Function],
      addAllUsers: [Function],
      deleteAllUsers: [Function],
      addDomain: [Function],
      deleteDomain: [Function],
      addGroup: [Function],
      deleteGroup: [Function],
      addProject: [Function],
      deleteProject: [Function],
      addUser: [Function],
      deleteUser: [Function]
    },
    readers: {
      addAllAuthenticatedUsers: [Function],
      deleteAllAuthenticatedUsers: [Function],
      addAllUsers: [Function],
      deleteAllUsers: [Function],
      addDomain: [Function],
      deleteDomain: [Function],
      addGroup: [Function],
      deleteGroup: [Function],
      addProject: [Function],
      deleteProject: [Function],
      addUser: [Function],
      deleteUser: [Function]
    },
    writers: {
      addAllAuthenticatedUsers: [Function],
      deleteAllAuthenticatedUsers: [Function],
      addAllUsers: [Function],
      deleteAllUsers: [Function],
      addDomain: [Function],
      deleteDomain: [Function],
      addGroup: [Function],
      deleteGroup: [Function],
      addProject: [Function],
      deleteProject: [Function],
      addUser: [Function],
      deleteUser: [Function]
    },
    pathPrefix: '/acl',
    request_: [Function: bound request],
    default: Acl {
      owners: [Object],
      readers: [Object],
      writers: [Object],
      pathPrefix: '/defaultObjectAcl',
      request_: [Function: bound request]
    }
  },
  iam: Iam {
    request_: [Function: bound request],
    resourceId_: 'buckets/[object Promise]'
  },
  getFilesStream: [Function],
  instanceRetryValue: true,
  instancePreconditionOpts: undefined,
  [Symbol(kCapture)]: false
}